"use strict";(self.webpackChunklearn=self.webpackChunklearn||[]).push([[4798],{407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"developer-guides/setup/run-locally","title":"Run Rubix Locally","description":"1. Open a terminal and navigate to the directory containing the rubixgoplatform executable.","source":"@site/docs/developer-guides/setup/run-locally.md","sourceDirName":"developer-guides/setup","slug":"/developer-guides/setup/run-locally","permalink":"/docs/developer-guides/setup/run-locally","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Run Rubix Locally","sidebar_label":"Run Rubix Locally"},"sidebar":"docs","previous":{"title":"Install Rubix","permalink":"/docs/developer-guides/setup/install-rubix"},"next":{"title":"DID Creation & Key Management","permalink":"/docs/developer-guides/setup/did-creation"}}');var s=t(4848),r=t(8453);const l={title:"Run Rubix Locally",sidebar_label:"Run Rubix Locally"},i="Start a Rubix Node",a={},c=[{value:"Confirm the node is operational and connected to the bootstraps. Check for below in the logs.",id:"confirm-the-node-is-operational-and-connected-to-the-bootstraps-check-for-below-in-the-logs",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"start-a-rubix-node",children:"Start a Rubix Node"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open a terminal and navigate to the directory containing the ",(0,s.jsx)(n.code,{children:"rubixgoplatform"})," executable."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd /path/to/rubixgoplatform\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Start a Rubix node with the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./rubixgoplatform run -s -testNet -defaultSetup -p <node_name> -n <node_number> -grpcPort <grpc_port>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./rubixgoplatform run -s -testNet -defaultSetup -p node0 -n 0 -grpcPort 10500\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will start the node in port 20000. The port number where the node starts will be 20000+(node_number)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"-testNet"}),": This flag will start the node in test network"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"-defaultSetup"}),": This flag adds a list of default quorums for testing. Skip this flag if you want to use your own quorums."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Replace the placeholders:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"-p"}),": Node name"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"-n"}),": Node port number (Default: 20000)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"-grpcPort"}),": Port number for gRPC communication"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"confirm-the-node-is-operational-and-connected-to-the-bootstraps-check-for-below-in-the-logs",children:"Confirm the node is operational and connected to the bootstraps. Check for below in the logs."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Bootstrap connection check",src:t(4303).A+"",width:"1400",height:"141"})}),"\n",(0,s.jsxs)(n.p,{children:["Once you have successfully started a local Rubix Node, you can proceed to ",(0,s.jsx)(n.a,{href:"/docs/developer-guides/setup/did-creation",children:"create a DID"}),".\nConnecting to ",(0,s.jsx)(n.a,{href:"/docs/developer-guides/setup/mainnet",children:"mainnet"})," and custon ",(0,s.jsx)(n.a,{href:"/docs/developer-guides/setup/subnet",children:"subnet"})," is explained after DID creation."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4303:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/bootstrap_verify-c338c2f2ab0abd2e8e6c086a7abb836f.png"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var o=t(6540);const s={},r=o.createContext(s);function l(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);