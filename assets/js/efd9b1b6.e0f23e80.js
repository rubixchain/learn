"use strict";(self.webpackChunklearn=self.webpackChunklearn||[]).push([[1624],{5222:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/didcreate-1ffe5bd591e7da1bcd89bb776bd4c1ba.png"},6672:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"developer-guides/setup/did-creation","title":"DID Creation & Key Management","description":"Each Rubix node is identified by a Decentralized Identity (DID) a self-generated, cryptographically verifiable public key that anchors the node\u2019s presence and authority in the network. If you have a DID, register the DID or if you have mneumonics key, you can restrore your DID.","source":"@site/docs/developer-guides/setup/did-creation.md","sourceDirName":"developer-guides/setup","slug":"/developer-guides/setup/did-creation","permalink":"/docs/developer-guides/setup/did-creation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"DID Creation & Key Management","sidebar_label":"DID Creation & Key Management"},"sidebar":"docs","previous":{"title":"Run Rubix Locally","permalink":"/docs/developer-guides/setup/run-locally"},"next":{"title":"Connect to Rubix Testnet","permalink":"/docs/developer-guides/setup/testnet"}}');var i=r(4848),a=r(8453);const o={title:"DID Creation & Key Management",sidebar_label:"DID Creation & Key Management"},d="Create a DID(Decentralized Identity)",s={},c=[{value:"Create",id:"create",level:2},{value:"Register",id:"register",level:2},{value:"Restore",id:"restore",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"create-a-diddecentralized-identity",children:"Create a DID(Decentralized Identity)"})}),"\n",(0,i.jsxs)(n.p,{children:["Each Rubix node is identified by a Decentralized Identity (DID) a self-generated, cryptographically verifiable public key that anchors the node\u2019s presence and authority in the network. If you have a DID, ",(0,i.jsx)(n.a,{href:"#register",children:"register"})," the DID or if you have mneumonics key, you can ",(0,i.jsx)(n.a,{href:"#restore",children:"restrore"})," your DID."]}),"\n",(0,i.jsx)(n.h2,{id:"create",children:"Create"}),"\n",(0,i.jsx)(n.p,{children:"Once the node is running, open a new tab in terminal while being in the same build path, create a DID by executing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./rubixgoplatform createdid -didType <did_type> -port <port_number>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./rubixgoplatform createdid -didType 4 -port 20000\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"DID Creation",src:r(5222).A+"",width:"1150",height:"85"})}),"\n",(0,i.jsx)(n.p,{children:"To get the mnemonic file, go to below location:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd /path/to/buildFolder/<Node_Name>/Rubix/TestNetDID/<did_generated>/mnemonic.txt\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note: Copy the mnemonic file to somewhere safe. This will help with node recovery."}),"\n",(0,i.jsx)(n.h2,{id:"register",children:"Register"}),"\n",(0,i.jsx)(n.p,{children:"After creating a DID, you can publish your DID among others in your network by registering your DID by executing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"  ./rubixgoplatform registerdid -did <did_created> -port <port_number>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"  ./rubixgoplatform registerdid -did bafybmicfvpln2j5yfjeokmafjsefz7ykibvtsg2swxmnr6nhvflj6qvo34 -port 20000\n"})}),"\n",(0,i.jsx)(n.h2,{id:"restore",children:"Restore"}),"\n",(0,i.jsx)(n.p,{children:"If you already have a mnemonic file, you can restore your DID."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"  ./rubixgoplatform createdid -didType <did_type> -port <port_number> -mnemonicKeyFile <mnemonic_file_path> \n"})}),"\n",(0,i.jsx)(n.p,{children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"  ./rubixgoplatform createdid -didType 4 -port 21200 -mnemonicKeyFile /home/rubix/Sai-Rubix/rubixgoplatform/linux/node12/Rubix/saimnemonic.txt\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var t=r(6540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);